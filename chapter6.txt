---
date: 2016-09-21 15:26
status: public
title: 电子邮件
---

在很多程序中都需要使用电子邮件，用于用户验证、信息提醒等。Python标准库中的smtplib包可用于在Flask程序中发送邮件，而Flask-Mail扩展则对其进行了包装，使其更适用于Flask的开发。
#### 安装及配置
##### 安装
使用`pip`安装：
```
(venv) $ pip install flask-mail
```
##### 配置SMTP服务器信息
要使用SMTP服务器进行邮件发送，还需要对其进行配置，如服务器地址、端口，还需要用于登录邮件服务器的用户名和密码。以下是可用的SMTP服务器配置：

|配置|默认值|说明|
|-----|------|-----|
|MAIL_SERVER|localhost|电子邮件服务器的主机名或IP地址|
|MAIL_PORT|25|电子邮件服务器的端口|
|MAIL_USE_TLS|False|启用传输层安全TLS协议|
|MAIL_USE_SSL|False|启用安全套接层SSL协议|
|MAIL_USENAME|None|邮件账户的用户名|
|MAIL_PASSWORD|None|邮件账户的密码|

`hello.py`：配置Flask-Mail使用新浪邮箱
*原书中使用的是Gmail，在国内使用不便，因此配置为新浪邮箱*

```
import os
# 原有内容
app.config['MAIL_SERVER'] = 'smtp.sina.com'
app.config['MAIL_PORT'] = 25'
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')
```
为了安全起见，自己的账户信息是不应该写在脚本中的。以上代码中最后两行即设置了从环境变量中获取邮件的帐户名和密码。
##### 初始化Flask-Mail
```
from flask_mail import Mail
mail = Mail(app)
```
##### 在环境变量中设置邮件用户名和密码
Linux/Mac OS X

```
(venv) $ export MAIL_USERNAME='your username'
(venv) $ export MAIL_PASSWORD='your password'
```
Windows

```
(venv) $ set MAIL_USERNAME='your username'
(venv) $ set MAIL_PASSWORD='your password'
```

#### 在Python shell中发送电子邮件
```
(venv) $ python hello.py shell
>>> from flask_mail import Message
>>> from hello import mail
>>> msg = Message('test subject', sender='example@sina.com', recipients=['recipients@example.com'])
>>> msg.body = 'text body'
>>> msg.html = '<b>HTML</b> body'
>>> with app.app_context():
...     mail.send(msg)
...
```
`Message()`函数设置了邮件信息，以上代码中的三个参数分别为：邮件主题、发件人邮箱（应当是前面在环境变量中设置好的`MAIL_USERNAME`）、收件人列表。`body`和`html`则分别代表邮件内容和HTML格式的内容。最后使用`send()`方法执行发送操作。

Flask-Mail中的`send()`函数使用`current_app`，因此需要在激活的程序上下文中执行。

### 在程序中集成发送电子邮件功能
#### 在`hello.py`中添加电子邮件支持
##### 邮件发送函数
```
from flask_mail import Message

app.config['FLASKY_MAIL_SUBJECT_PREFIX'] = '[Flasky]'
app.config['FLASKY_MAIL_SENDER'] = 'admin@sina.com'

def send_mail(to, subject, template, **kwargs):
    msg = Message(app.config['FLASKY_MAIL_SUBJECT_PREFIX'] + subject, sender=app.config['FLASKY_MAIL_SENDER'], recipients=[to])
    msg.body = render_template(template + '.txt', **kwargs)
    msg.html = render_template(template + '.html', **kwargs)
    mail.send(msg)
```

以上的`admin@sina.com`是系统管理员邮箱，用于发送邮件的，而`[Flasky]`则用于主题前缀。`send_mail()`程序中使用模板时不能包含扩展名，这样才便于使用两个模板分别渲染纯文本邮件和HTML邮件。

##### 视图函数中的设置
*如果提交的用户是新用户，则给管理员发送一封邮件提醒*

```
# 原有内容
app.config['FLASKY_ADMIN'] = os.environ.get('FLASKY_ADMIN')
# 原有内容
@app.route('/', methods=['GET', 'POST'])
def index():
    form = NameForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.name.data).first()
        if user is None:
            user = User(username=form.name.data)
            db.session.add(user)
            session['known'] = False
            if app.config['FLASKY_ADMIN']:
                send_mail(app.config['FLASKY_ADMIN'], 'New User', 'mail/new_user',  user=user)
    else:
        session['known'] = True
        session['name'] = form.name.data
        return redirect(url_for('index'))
    return render_template('index.html', form=form, name=session.get('name'), known=session.get('known', False))
```
为了正确执行程序，需要在templates文件夹下创建mail子文件夹，用于放置邮件模板。在其中新建两个邮件模板，*模板内容其实就是邮件内容了，很简单，可以自定义*：
**templates/mail/new_user.txt**
```
User {{ user.username }} has joined.
```
**templates/mail/new_user.html**
```
User <b>{{ user.username }}</b> has joined.
```
这里的`user`是否前面的渲染模板语句中的`**kwargs`传入的。程序中用到了环境变量`FLASKY_ADMIN`，可如下设置：
**Linux/Mac OS X**
```
(venv) $ export FLASKY_ADMIN='your-email-address'
```
**Windows**
```
(venv) $ set FLASKY_ADMIN='your-email-address'
```
此时，就可以进行测试了，当在表单中写入新名字提交时，管理员就会收到一封邮件提醒。
### 异步发送电子邮件
当在发送电子邮件时，可发现程序有停滞现象，表现在浏览器上就是刷新按钮在转，这时就是`send_mail()`函数正在执行。为了避免这种不必要的延迟，可以使用异步的方法执行邮件发送函数。
*修改`hello.py`：*
```
from threading import Thread

def send_async_email(app, msg):
    with app.app_context():
        mail.send(msg)
        
def send_mail(to, subject, template, **kwargs):
    msg = Message(app.config['FLASKY_MAIL_SUBJECT_PREFIX'] + subject, sender=app.config['FLASKY_MAIL_SENDER'], recipients=[to])
    msg.body = render_template(template + '.txt', **kwargs)
    msg.html = render_template(template + '.html', **kwargs)
    thr = Thread(target=send_async_email, args=[app, msg])
    thr.start()
    return thr
```
到些，程序中便中成功集成了电子邮件的功能。但是如果在要程序中发送大量电子邮件时，使用专门发送电子邮件的作业要比给每封邮件都新建一个线程更合适。例如，可以把执行`send_async_email()`函数的操作发给[Celery](http://www.celeryproject.org/)任务队列。